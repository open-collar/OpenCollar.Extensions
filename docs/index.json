{
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics This library provides extensions and base classes for low-level .NET framework types."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions | API Documentation",
    "keywords": "OpenCollar.Extensions This library provides extensions and base classes for low-level .NET framework types. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage This library provides extensions and base classes for low-level .NET framework types. Related Project OpenCollar.Extensions OpenCollar.Extensions.Configuration OpenCollar.Extensions.Validation"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics This library provides extensions and base classes for low-level .NET framework types. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/"
  },
  "api/OpenCollar.Extensions.html": {
    "href": "api/OpenCollar.Extensions.html",
    "title": "Namespace OpenCollar.Extensions | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions Classes DelegateExtensions Extensions to the delegate class. Disposable A base class for objects that implement System.IDisposable . ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. TypeExtensions Methods that extend the System.Type class. UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Enums ArgsUsageKind Defines the ways in which an event args factory should be used. Delegates EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate."
  },
  "api/OpenCollar.Extensions.Disposable.html": {
    "href": "api/OpenCollar.Extensions.Disposable.html",
    "title": "Class Disposable | API Documentation",
    "keywords": "Class Disposable A base class for objects that implement System.IDisposable . Inheritance System.Object Disposable Implements System.IDisposable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public abstract class Disposable : IDisposable Remarks No finalizer is implemented - this is left to the few consumers that will actually need it. Methods | Improve this Doc View Source CheckNotDisposed() Checks that the object has not been disposed of, and throws an exception if it has. Declaration public void CheckNotDisposed() Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Implements System.IDisposable"
  },
  "api/OpenCollar.Extensions.TypeExtensions.html": {
    "href": "api/OpenCollar.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | API Documentation",
    "keywords": "Class TypeExtensions Methods that extend the System.Type class. Inheritance System.Object TypeExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class TypeExtensions Methods | Improve this Doc View Source GetAssemblyDirectoryPath(Type) Gets the full path to directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static string GetAssemblyDirectoryPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. Returns Type Description System.String The full path to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc View Source GetAssemblyPath(Type) Gets the full path to the assembly in which the type is defined. Declaration [NotNull] public static string GetAssemblyPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly path. Returns Type Description System.String The full path to the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc View Source GetAssemblyRelativePath(Type, String[]) Gets the full path to a file or directory relative to the directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"type:null=>null;type:notnull=>notnull\")] public static string GetAssemblyRelativePath([CanBeNull] this Type type, [CanBeNull] params string[] pathFragments) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. If null then null is returned System.String [] pathFragments The fragments of the path to append to root directory in which the assembly resides. Returns Type Description System.String The full path to a file or directory relative to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an the relative version of the path given is returned."
  },
  "api/OpenCollar.Extensions.ExceptionManager.html": {
    "href": "api/OpenCollar.Extensions.ExceptionManager.html",
    "title": "Class ExceptionManager | API Documentation",
    "keywords": "Class ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. Inheritance System.Object ExceptionManager Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class ExceptionManager Methods | Improve this Doc View Source HasRegisteredHandlers() Determines whether there are any registered exception handlers. Declaration public static bool HasRegisteredHandlers() Returns Type Description System.Boolean true if [has registered handlers]; otherwise, false . | Improve this Doc View Source OnUnhandledException(Exception) Called when an exception cannot be handled. Declaration public static void OnUnhandledException([CanBeNull] Exception exception) Parameters Type Name Description System.Exception exception The exception that cannot be handled. Events | Improve this Doc View Source UnhandledException An event that is raised every time an unhandled exception is reported. Declaration public static event EventHandler<UnhandledExceptionEventArgs> UnhandledException Event Type Type Description System.EventHandler < UnhandledExceptionEventArgs >"
  },
  "api/OpenCollar.Extensions.DelegateExtensions.html": {
    "href": "api/OpenCollar.Extensions.DelegateExtensions.html",
    "title": "Class DelegateExtensions | API Documentation",
    "keywords": "Class DelegateExtensions Extensions to the delegate class. Inheritance System.Object DelegateExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class DelegateExtensions Methods | Improve this Doc View Source GetDescription(Delegate) Gets the delegate description. Declaration [NotNull] public static string GetDescription([CanBeNull] this Delegate delegate) Parameters Type Name Description System.Delegate delegate The delegate to describe. Returns Type Description System.String A description of the type and method specified by the delegate. | Improve this Doc View Source SafeInvoke(Delegate, String, Object) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender) Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. | Improve this Doc View Source SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke<T>([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender, EventArgsFactory<T> eventArgFactory, ArgsUsageKind usage) where T : EventArgs Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. EventArgsFactory <T> eventArgFactory A factory for generating event args. ArgsUsageKind usage The way in which to use the factory to generate args. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. Type Parameters Name Description T The type of the event args to pass. Exceptions Type Condition System.ArgumentOutOfRangeException Invalid value passed in the usage argument."
  },
  "api/OpenCollar.Extensions.ArgsUsageKind.html": {
    "href": "api/OpenCollar.Extensions.ArgsUsageKind.html",
    "title": "Enum ArgsUsageKind | API Documentation",
    "keywords": "Enum ArgsUsageKind Defines the ways in which an event args factory should be used. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public enum ArgsUsageKind Fields Name Description Reuse The factory will be called once and the same instance of the event args will be used for all delegates. UniqueInstance The factory will be called separately for each delegate. Unknown Usage is undefined (this will cause an error if used)."
  },
  "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html": {
    "href": "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html",
    "title": "Class UnhandledExceptionEventArgs | API Documentation",
    "keywords": "Class UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Inheritance System.Object System.EventArgs System.ComponentModel.HandledEventArgs UnhandledExceptionEventArgs Inherited Members System.ComponentModel.HandledEventArgs.Handled System.EventArgs.Empty Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public sealed class UnhandledExceptionEventArgs : HandledEventArgs Properties | Improve this Doc View Source Exception Gets the exception that could not be handled. Declaration [NotNull] public Exception Exception { get; } Property Value Type Description System.Exception The exception that could not be handled. Will never be null ."
  },
  "api/OpenCollar.Extensions.EventArgsFactory-1.html": {
    "href": "api/OpenCollar.Extensions.EventArgsFactory-1.html",
    "title": "Delegate EventArgsFactory<T> | API Documentation",
    "keywords": "Delegate EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public delegate T EventArgsFactory<out T>() where T : EventArgs; Returns Type Description T A instance of the event args to pass to the delegate when invoked. Type Parameters Name Description T The type of the event args that will be returned. Extension Methods DelegateExtensions.GetDescription(Delegate) DelegateExtensions.SafeInvoke(Delegate, String, Object) DelegateExtensions.SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind)"
  }
}