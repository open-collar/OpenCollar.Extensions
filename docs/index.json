{
  "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html",
    "title": "Interface IConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Interface IConfigurationDictionary<TElement> Represents a dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Inherited Members System.Collections.Generic.IDictionary<System.String, TElement>.Add(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.TryGetValue(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Item[System.String] System.Collections.Generic.IDictionary<System.String, TElement>.Keys System.Collections.Generic.IDictionary<System.String, TElement>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Add(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Contains(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, TElement>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Remove(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.IsReadOnly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public interface IConfigurationDictionary<TElement> : IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged Type Parameters Name Description TElement The type of the dictionary element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationDictionary<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": { \"First\": \"Value 1\", \"Second\": \"Value 2\", \"Third\": \"Value 3\" } } Methods | Improve this Doc View Source AddCopy(String, TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(string key, TElement value) Parameters Type Name Description System.String key The key identifying the value to add. TElement value The value to copy. Returns Type Description TElement The newly added element. If this element is derived from IConfigurationObject , IConfigurationCollection<TElement> or IConfigurationDictionary<TElement> , and the object given was not created by this library, then a new object will be created and they properties and elements in the object given will be copied. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew(String) Adds a new value with the key specified, returning the new value. Declaration TElement AddNew(string key) Parameters Type Name Description System.String key The key identifying the value to add. Returns Type Description TElement Remarks This allows instances of the internal implementation of objects to be created and added to the collection, and returned to be populated. | Improve this Doc View Source Contains(TElement) Determines whether this dictionary contains the element specified. Declaration bool Contains(TElement element) Parameters Type Name Description TElement element The element for which to check. Returns Type Description System.Boolean true if the dictionary contains the specified element; otherwise, false . See Also System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Specialized.INotifyCollectionChanged IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.ConfigurationDictionaryConverter-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.ConfigurationDictionaryConverter-1.html",
    "title": "Class ConfigurationDictionaryConverter<TElement> | API Documentation",
    "keywords": "Class ConfigurationDictionaryConverter<TElement> A converter allowing IConfigurationDictionary<TElement> derived objects to be serialized and deserialized as JSON objects. Inheritance System.Object System.Text.Json.Serialization.JsonConverter System.Text.Json.Serialization.JsonConverter < IConfigurationDictionary <TElement>> ConfigurationDictionaryConverter<TElement> Inherited Members System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.CanConvert(System.Type) Namespace : OpenCollar.Extensions.Converters.Text.Json Assembly : OpenCollar.Extensions.dll Syntax public class ConfigurationDictionaryConverter<TElement> : JsonConverter<IConfigurationDictionary<TElement>> Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ConfigurationDictionaryConverter(JsonSerializerOptions) Initializes a new instance of the ConfigurationDictionaryConverter<TElement> class. Declaration public ConfigurationDictionaryConverter(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options The options controlling the serialization/deserialization. Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T . Declaration public override IConfigurationDictionary<TElement> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.Utf8JsonReader reader The reader from which to take JSON elements. System.Type typeToConvert The type to convert. System.Text.Json.JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description IConfigurationDictionary <TElement> The converted value. Overrides System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Exceptions Type Condition System.Text.Json.JsonException Unable to convert &quot;{propertyName}&quot; to Enum &quot;{_keyType}&quot;. or | Improve this Doc View Source Write(Utf8JsonWriter, IConfigurationDictionary<TElement>, JsonSerializerOptions) Writes the specifiedvalue to the writer given. Declaration public override void Write(Utf8JsonWriter writer, IConfigurationDictionary<TElement> dictionary, JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.Utf8JsonWriter writer The JSON writer with which to record data. IConfigurationDictionary <TElement> dictionary The dictionary from which to read data. System.Text.Json.JsonSerializerOptions options The options govenerning how the JSON is to be formatted. Overrides System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.Write(System.Text.Json.Utf8JsonWriter, OpenCollar.Extensions.IConfigurationDictionary<TElement>, System.Text.Json.JsonSerializerOptions) See Also System.Text.Json.Serialization.JsonConverter <T>"
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions | API Documentation",
    "keywords": "OpenCollar.Extensions The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "api/OpenCollar.Extensions.TypeExtensions.html": {
    "href": "api/OpenCollar.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | API Documentation",
    "keywords": "Class TypeExtensions Methods that extend the System.Type class. Inheritance System.Object TypeExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class TypeExtensions Methods | Improve this Doc GetAssemblyDirectoryPath(Type) Gets the full path to directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static string GetAssemblyDirectoryPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. Returns Type Description System.String The full path to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc GetAssemblyPath(Type) Gets the full path to the assembly in which the type is defined. Declaration [NotNull] public static string GetAssemblyPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly path. Returns Type Description System.String The full path to the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc GetAssemblyRelativePath(Type, String[]) Gets the full path to a file or directory relative to the directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"type:null=>null;type:notnull=>notnull\")] public static string GetAssemblyRelativePath([CanBeNull] this Type type, [CanBeNull] params string[] pathFragments) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. If null then null is returned System.String [] pathFragments The fragments of the path to append to root directory in which the assembly resides. Returns Type Description System.String The full path to a file or directory relative to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an the relative version of the path given is returned."
  },
  "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationDictionary-1.html",
    "title": "Interface IReadOnlyConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Interface IReadOnlyConfigurationDictionary<TElement> Represents a read-only dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Items cannot be added or removed. Inherited Members IConfigurationDictionary<TElement>.AddCopy(String, TElement) IConfigurationDictionary<TElement>.AddNew(String) IConfigurationDictionary<TElement>.Contains(TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Add(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.TryGetValue(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Item[System.String] System.Collections.Generic.IDictionary<System.String, TElement>.Keys System.Collections.Generic.IDictionary<System.String, TElement>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Add(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Contains(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, TElement>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Remove(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.IsReadOnly System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public interface IReadOnlyConfigurationDictionary<TElement> : IConfigurationDictionary<TElement>, IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged, IReadOnlyDictionary<string, TElement>, IReadOnlyCollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable Type Parameters Name Description TElement The type of the dictionary element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationDictionary<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": { \"First\": \"Value 1\", \"Second\": \"Value 2\", \"Third\": \"Value 3\" } } See Also System.Collections.Generic.IReadOnlyDictionary`2 IConfigurationDictionary <TElement>"
  },
  "api/OpenCollar.Extensions.Disposable.html": {
    "href": "api/OpenCollar.Extensions.Disposable.html",
    "title": "Class Disposable | API Documentation",
    "keywords": "Class Disposable A base class for objects that implement System.IDisposable . Inheritance System.Object Disposable Implements System.IDisposable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public abstract class Disposable : IDisposable Remarks No finalizer is implemented - this is left to the few consumers that will actually need it. Methods | Improve this Doc CheckNotDisposed() Checks that the object has not been disposed of, and throws an exception if it has. Declaration public void CheckNotDisposed() Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. | Improve this Doc Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Implements System.IDisposable"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions | API Documentation",
    "keywords": "OpenCollar.Extensions Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/"
  },
  "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html",
    "title": "Class TypeMismatchException | API Documentation",
    "keywords": "Class TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Inherited Members ConfigurationException.ValidationPath ConfigurationException.GetObjectData(SerializationInfo, StreamingContext) Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public class TypeMismatchException : ConfigurationException, ISerializable Remarks Use the ConfigurationPath property to discover the path to the configuration item concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source TypeMismatchException() Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException() | Improve this Doc View Source TypeMismatchException(SerializationInfo, StreamingContext) Initializes a new instance of the TypeMismatchException class. Declaration protected TypeMismatchException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source TypeMismatchException(String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source TypeMismatchException(String, String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.ArgsUsageKind.html": {
    "href": "api/OpenCollar.Extensions.ArgsUsageKind.html",
    "title": "Enum ArgsUsageKind | API Documentation",
    "keywords": "Enum ArgsUsageKind Defines the ways in which an event args factory should be used. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public enum ArgsUsageKind Fields Name Description Reuse The factory will be called once and the same instance of the event args will be used for all delegates. UniqueInstance The factory will be called separately for each delegate. Unknown Usage is undefined (this will cause an error if used)."
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.ConfigurationDictionaryConverter-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.ConfigurationDictionaryConverter-1.html",
    "title": "Class ConfigurationDictionaryConverter<TElement> | API Documentation",
    "keywords": "Class ConfigurationDictionaryConverter<TElement> Inheritance System.Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < IConfigurationDictionary <TElement>> ConfigurationDictionaryConverter<TElement> Inherited Members Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.CanConvert(System.Type) Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Namespace : OpenCollar.Extensions.Converters.Newtonsoft.Json Assembly : OpenCollar.Extensions.dll Syntax public sealed class ConfigurationDictionaryConverter<TElement> : JsonConverter<IConfigurationDictionary<TElement>> Type Parameters Name Description TElement Methods | Improve this Doc View Source ReadJson(JsonReader, Type, IConfigurationDictionary<TElement>, Boolean, JsonSerializer) Declaration public override IConfigurationDictionary<TElement> ReadJson(JsonReader reader, Type objectType, IConfigurationDictionary<TElement> existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType IConfigurationDictionary <TElement> existingValue System.Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description IConfigurationDictionary <TElement> Overrides Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, OpenCollar.Extensions.IConfigurationDictionary<TElement>, System.Boolean, Newtonsoft.Json.JsonSerializer) | Improve this Doc View Source WriteJson(JsonWriter, IConfigurationDictionary<TElement>, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, IConfigurationDictionary<TElement> value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer IConfigurationDictionary <TElement> value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationDictionary<TElement>>.WriteJson(Newtonsoft.Json.JsonWriter, OpenCollar.Extensions.IConfigurationDictionary<TElement>, Newtonsoft.Json.JsonSerializer)"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectSettings.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectSettings.html",
    "title": "Class ConfigurationObjectSettings | API Documentation",
    "keywords": "Class ConfigurationObjectSettings Settings that govern the way in which configuration objects are generated. Inheritance System.Object ConfigurationObjectSettings Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public sealed class ConfigurationObjectSettings Constructors | Improve this Doc View Source ConfigurationObjectSettings() Initializes a new instance of the ConfigurationObjectSettings class. Declaration public ConfigurationObjectSettings() Properties | Improve this Doc View Source EnableNewtonSoftJsonSupport Gets or sets a value indicating whether Newtonsoft.Json serialization should be supported. Declaration public bool EnableNewtonSoftJsonSupport { get; set; } Property Value Type Description System.Boolean true if Newtonsoft.Json serialization should be supported; otherwise, false . Remarks This property will default to true if the Newtonsoft.Json assembly is loaded at the time the settings object is created."
  },
  "api/OpenCollar.Extensions.html": {
    "href": "api/OpenCollar.Extensions.html",
    "title": "Namespace OpenCollar.Extensions | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions Classes DelegateExtensions Extensions to the delegate class. Disposable A base class for objects that implement System.IDisposable . ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. TypeExtensions Methods that extend the System.Type class. UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Enums ArgsUsageKind Defines the ways in which an event args factory should be used. Delegates EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate."
  },
  "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | API Documentation",
    "keywords": "Class ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. Inheritance System.Object ServiceCollectionExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class ServiceCollectionExtensions Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples The starting point is to define an interface through which to read your configuration. The interface must derive from IConfigurationObject . The interfaces must be public. See th example below. public interface IEnvironment : IConfigurationObject { public string EnvironmentName { get; } public string Version { get; } } public interface IMyConfig : IConfigurationObject { public IEnvironment Environment { get; } public string ReadOnlyString { get; } public string ReadWriteString { get; } } The next step is to register the interface as a service in Startup.cs . At the same time the IConfigurationRoot object for the application must also be registered as a service. public class Startup { private readonly IConfigurationRoot _configuration; public Startup(IConfiguration configuration) { // Capture the configuration object passed in when the application is started. _configuration = (IConfigurationRoot)configuration; } public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddSingleton(_configuration); services.AddConfigurationReader<IMyConfig>(); } ... } Later, when needed, the configuration reader is available as a service: public MyConstructor(IMyConfig config) { var version = config.Environment.Version; } Methods | Improve this Doc View Source AddConfigurationReader<TConfigurationObject>(IServiceCollection, ConfigurationObjectSettings) Add a new kind of configuration reader that represents values taken directly from the Microsoft.Extensions.Validation.IConfigurationRoot object in the service collection. Declaration public static void AddConfigurationReader<TConfigurationObject>(this IServiceCollection serviceCollection, ConfigurationObjectSettings settings = null) where TConfigurationObject : IConfigurationObject Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to which to add the configuration reader. This must not be null . ConfigurationObjectSettings settings Optional settings used to control how configuration objects are created and the features they support. Type Parameters Name Description TConfigurationObject The interface through which consumers will access the configuration. This must be derived from the IConfigurationObject interface."
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.html",
    "title": "Namespace OpenCollar.Extensions.Converters.Text.Json | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Converters.Text.Json Classes ConfigurationDictionaryConverter<TElement> A converter allowing IConfigurationDictionary<TElement> derived objects to be serialized and deserialized as JSON objects. ConfigurationDictionaryConverterFactory A factory that produces converters allowing objects implementing IConfigurationDictionary<TElement> to be converted to and from JSON format."
  },
  "api/OpenCollar.Extensions.EventArgsFactory-1.html": {
    "href": "api/OpenCollar.Extensions.EventArgsFactory-1.html",
    "title": "Delegate EventArgsFactory<T> | API Documentation",
    "keywords": "Delegate EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public delegate T EventArgsFactory<out T>() where T : EventArgs; Returns Type Description T A instance of the event args to pass to the delegate when invoked. Type Parameters Name Description T The type of the event args that will be returned. Extension Methods DelegateExtensions.GetDescription(Delegate) DelegateExtensions.SafeInvoke(Delegate, String, Object) DelegateExtensions.SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind)"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationException.html",
    "title": "Class ConfigurationException | API Documentation",
    "keywords": "Class ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public class ConfigurationException : Exception, ISerializable Remarks Use the ConfigurationPath property to discover the path to the configuration item concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() | Improve this Doc View Source ConfigurationException(SerializationInfo, StreamingContext) Initializes a new instance of the ConfigurationException class. Declaration protected ConfigurationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source ConfigurationException(String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source ConfigurationException(String, String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source ConfigurationPath Gets or sets the path to the configuration affected. Declaration public string ConfigurationPath { get; set; } Property Value Type Description System.String The path to the configuration affected. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.ConfigurationDictionaryConverterFactory.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Text.Json.ConfigurationDictionaryConverterFactory.html",
    "title": "Class ConfigurationDictionaryConverterFactory | API Documentation",
    "keywords": "Class ConfigurationDictionaryConverterFactory A factory that produces converters allowing objects implementing IConfigurationDictionary<TElement> to be converted to and from JSON format. Inheritance System.Object System.Text.Json.Serialization.JsonConverter System.Text.Json.Serialization.JsonConverterFactory ConfigurationDictionaryConverterFactory Namespace : OpenCollar.Extensions.Converters.Text.Json Assembly : OpenCollar.Extensions.dll Syntax public class ConfigurationDictionaryConverterFactory : JsonConverterFactory Methods | Improve this Doc View Source CanConvert(Type) When overridden in a derived class, determines whether the converter instance can convert the specified object type. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description System.Type typeToConvert The type of the object to check whether it can be converted by this converter instance. Returns Type Description System.Boolean true if the instance can convert the specified object type; otherwise, false . Overrides System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type) | Improve this Doc View Source CreateConverter(Type, JsonSerializerOptions) Creates the converter for the type specified. Declaration public override JsonConverter CreateConverter(Type type, JsonSerializerOptions options) Parameters Type Name Description System.Type type The type to convert. System.Text.Json.JsonSerializerOptions options The options controlling the conversion. Returns Type Description System.Text.Json.Serialization.JsonConverter A JSON converter for the type given. Overrides System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type, System.Text.Json.JsonSerializerOptions) See Also System.Text.Json.Serialization.JsonConverterFactory"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html",
    "title": "Interface IConfigurationObject | API Documentation",
    "keywords": "Interface IConfigurationObject The interface from which all configuration objects are derived. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public interface IConfigurationObject : IDisposable, INotifyPropertyChanged Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Properties | Improve this Doc View Source IsDirty Gets a value indicating whether this object has any properties with unsaved changes. Declaration bool IsDirty { get; } Property Value Type Description System.Boolean true if this object has any properties with unsaved changes; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. Methods | Improve this Doc View Source Delete() Recursively deletes all of the persisted properties from the configuration sources. Declaration void Delete() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Load() Loads all of the properties from the configuration sources, overwriting any unsaved changes. Declaration void Load() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Save() Saves this current values for each property back to the configuration sources. Declaration void Save() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of."
  },
  "api/OpenCollar.Extensions.Configuration.InvalidPropertyException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.InvalidPropertyException.html",
    "title": "Class InvalidPropertyException | API Documentation",
    "keywords": "Class InvalidPropertyException An exception thrown when a property is incorrectly defined. Inheritance System.Object System.Exception InvalidPropertyException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public class InvalidPropertyException : Exception, ISerializable Remarks Use the PropertyName property to discover the name of the property concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source InvalidPropertyException() Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException() | Improve this Doc View Source InvalidPropertyException(SerializationInfo, StreamingContext) Initializes a new instance of the InvalidPropertyException class. Declaration protected InvalidPropertyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source InvalidPropertyException(String) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source InvalidPropertyException(String, Exception) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source InvalidPropertyException(String, String) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string propertyName, string message) Parameters Type Name Description System.String propertyName The property name and parent type name of the property affected. System.String message The message that describes the error. | Improve this Doc View Source InvalidPropertyException(String, String, Exception) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string propertyName, string message, Exception innerException) Parameters Type Name Description System.String propertyName The property name and parent type name of the property affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source PropertyName Gets or sets the property name and parent type name of the property affected. Declaration public string PropertyName { get; set; } Property Value Type Description System.String The property name and parent type name of the property affected. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationPersistenceActions.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationPersistenceActions.html",
    "title": "Enum ConfigurationPersistenceActions | API Documentation",
    "keywords": "Enum ConfigurationPersistenceActions Defines the behavior when loading or saving the value for any particular property. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Flags] public enum ConfigurationPersistenceActions Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description Ignore Values will be neither loaded nor saved. This effectively means the property is never persisted and is plain writeable property on the class. LoadAndSave Values are loaded from the configuration service and changes are saved back to the configuration service. LoadOnly Values are loaded from the configuration service, but changes are never saved back to the configuration service. SaveOnly Values are never loaded from the configuration service, but changes are saved back to the configuration service. See Also ConfigurationAttribute"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationAttribute.html",
    "title": "Class ConfigurationAttribute | API Documentation",
    "keywords": "Class ConfigurationAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. Inheritance System.Object System.Attribute ConfigurationAttribute Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ConfigurationAttribute : Attribute Remarks Use the DefaultValue property of this attribute to manage the default value for configuration items that do not require and underlying setting. The Persistence property of this attribute can be used to control whether values are read or written to and from the underlying configuration source. The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined with a default value, meaning that a value will be set, and no error will be thrown, even if there is no value in the underlying configuration service. In this case the result is a property that will be set to \"DEFAULT\" if no name is specified in configuration file. [Configuration(DefaultValue = \"DEFAULT\")] string Name { get; set; } In the following example the attribute is used to define the way in which a property is persisted. The value will be loaded from the configuration file, but never saved back to the file. This allows the application to change the value for all consumers of the interface, but it will never be changed in the file. [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly)] string InitialValue { get; set; } Constructors | Improve this Doc View Source ConfigurationAttribute() Initializes a new instance of the ConfigurationAttribute class. Declaration public ConfigurationAttribute() Properties | Improve this Doc View Source DefaultValue Gets the default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object The default value to return if no value is defined in the configuration root. Can be null . | Improve this Doc View Source Persistence Gets or sets the policy for when to load and save values from the configuration service. Declaration public ConfigurationPersistenceActions Persistence { get; set; } Property Value Type Description ConfigurationPersistenceActions The policy for when to load and save values from the configuration service. See Also System.Attribute ConfigurationPersistenceActions"
  },
  "api/OpenCollar.Extensions.Configuration.html": {
    "href": "api/OpenCollar.Extensions.Configuration.html",
    "title": "Namespace OpenCollar.Extensions | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions Classes ConfigurationAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . ConfigurationObjectSettings Settings that govern the way in which configuration objects are generated. InvalidPropertyException An exception thrown when a property is incorrectly defined. PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. Interfaces IConfigurationCollection<TElement> Represents a collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. IConfigurationDictionary<TElement> Represents a dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. IConfigurationObject The interface from which all configuration objects are derived. IReadOnlyConfigurationCollection<TElement> Represents a read-only collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Items cannot be added or removed. IReadOnlyConfigurationDictionary<TElement> Represents a read-only dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Items cannot be added or removed. Enums ConfigurationPersistenceActions Defines the behavior when loading or saving the value for any particular property. PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path."
  },
  "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html": {
    "href": "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html",
    "title": "Class UnhandledExceptionEventArgs | API Documentation",
    "keywords": "Class UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Inheritance System.Object System.EventArgs System.ComponentModel.HandledEventArgs UnhandledExceptionEventArgs Inherited Members System.ComponentModel.HandledEventArgs.Handled System.EventArgs.Empty Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public sealed class UnhandledExceptionEventArgs : HandledEventArgs Properties | Improve this Doc Exception Gets the exception that could not be handled. Declaration [NotNull] public Exception Exception { get; } Property Value Type Description System.Exception The exception that could not be handled. Will never be null ."
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.html",
    "title": "Namespace OpenCollar.Extensions.Converters.Newtonsoft.Json | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Converters.Newtonsoft.Json Classes ConfigurationCollectionConverter<TElement> ConfigurationDictionaryConverter<TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.PathAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathAttribute.html",
    "title": "Class PathAttribute | API Documentation",
    "keywords": "Class PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. Inheritance System.Object System.Attribute PathAttribute Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public sealed class PathAttribute : Attribute Remarks The usage and path arguments of the constructor can be used to determine whether this property is read from a path relative to the parent or from an absolute path. The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the following example the attribute is used to define a path that is always absolute. [Path(PathIs.Absolute, \"ConfigurationStrings:Database\")] string DatabaseConnectionString { get; set; } Constructors | Improve this Doc View Source PathAttribute(PathIs, String) Initializes a new instance of the PathAttribute class. Declaration public PathAttribute(PathIs usage, string path) Parameters Type Name Description PathIs usage The usage. System.String path The path. Exceptions Type Condition System.ArgumentException path must contain a valid path or fragment of a path. System.ArgumentOutOfRangeException usage does not contain a valid value. See Also System.Attribute PathIs"
  },
  "api/OpenCollar.Extensions.ExceptionManager.html": {
    "href": "api/OpenCollar.Extensions.ExceptionManager.html",
    "title": "Class ExceptionManager | API Documentation",
    "keywords": "Class ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. Inheritance System.Object ExceptionManager Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class ExceptionManager Methods | Improve this Doc HasRegisteredHandlers() Determines whether there are any registered exception handlers. Declaration public static bool HasRegisteredHandlers() Returns Type Description System.Boolean true if [has registered handlers]; otherwise, false . | Improve this Doc OnUnhandledException(Exception) Called when an exception cannot be handled. Declaration public static void OnUnhandledException([CanBeNull] Exception exception) Parameters Type Name Description System.Exception exception The exception that cannot be handled. Events | Improve this Doc UnhandledException An event that is raised every time an unhandled exception is reported. Declaration public static event EventHandler<UnhandledExceptionEventArgs> UnhandledException Event Type Type Description System.EventHandler < UnhandledExceptionEventArgs >"
  },
  "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationCollection-1.html",
    "title": "Interface IReadOnlyConfigurationCollection<TElement> | API Documentation",
    "keywords": "Interface IReadOnlyConfigurationCollection<TElement> Represents a read-only collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Items cannot be added or removed. Inherited Members IConfigurationCollection<TElement>.AddCopy(TElement) IConfigurationCollection<TElement>.AddNew() System.Collections.Generic.IList<TElement>.IndexOf(TElement) System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement) System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32) System.Collections.Generic.IList<TElement>.Item[System.Int32] System.Collections.Generic.ICollection<TElement>.Add(TElement) System.Collections.Generic.ICollection<TElement>.Clear() System.Collections.Generic.ICollection<TElement>.Contains(TElement) System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32) System.Collections.Generic.ICollection<TElement>.Remove(TElement) System.Collections.Generic.ICollection<TElement>.Count System.Collections.Generic.ICollection<TElement>.IsReadOnly System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.Collections.Generic.IEnumerable<TElement>.GetEnumerator() Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public interface IReadOnlyConfigurationCollection<TElement> : IConfigurationCollection<TElement>, IList<TElement>, ICollection<TElement>, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged, IReadOnlyCollection<TElement>, IEnumerable<TElement>, IEnumerable Type Parameters Name Description TElement The type of the collection element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IReadOnlyConfigurationCollection<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": [ \"Value 1\", \"Value 2\", \"Value 3\" ] } See Also System.Collections.Generic.IReadOnlyCollection`1 IConfigurationCollection <TElement>"
  },
  "api/OpenCollar.Extensions.DelegateExtensions.html": {
    "href": "api/OpenCollar.Extensions.DelegateExtensions.html",
    "title": "Class DelegateExtensions | API Documentation",
    "keywords": "Class DelegateExtensions Extensions to the delegate class. Inheritance System.Object DelegateExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class DelegateExtensions Methods | Improve this Doc GetDescription(Delegate) Gets the delegate description. Declaration [NotNull] public static string GetDescription([CanBeNull] this Delegate delegate) Parameters Type Name Description System.Delegate delegate The delegate to describe. Returns Type Description System.String A description of the type and method specified by the delegate. | Improve this Doc SafeInvoke(Delegate, String, Object) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender) Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. | Improve this Doc SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke<T>([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender, EventArgsFactory<T> eventArgFactory, ArgsUsageKind usage) where T : EventArgs Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. EventArgsFactory <T> eventArgFactory A factory for generating event args. ArgsUsageKind usage The way in which to use the factory to generate args. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. Type Parameters Name Description T The type of the event args to pass. Exceptions Type Condition System.ArgumentOutOfRangeException Invalid value passed in the usage argument."
  },
  "api/OpenCollar.Extensions.Configuration.PathIs.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathIs.html",
    "title": "Enum PathIs | API Documentation",
    "keywords": "Enum PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public enum PathIs Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description Absolute The path is treated as a root and any previous context is ignored. Relative The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. Root Obsolete. The path is treated as a root and any previous context is ignored. Suffix Obsolete. The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. Unknown The usage of the path is unknown or undefined. Use of this value will usually result in an error; it is provided to as sentinel to detect accidental usages. See Also PathAttribute"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html",
    "title": "Interface IConfigurationCollection<TElement> | API Documentation",
    "keywords": "Interface IConfigurationCollection<TElement> Represents a collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Inherited Members System.Collections.Generic.IList<TElement>.IndexOf(TElement) System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement) System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32) System.Collections.Generic.IList<TElement>.Item[System.Int32] System.Collections.Generic.ICollection<TElement>.Add(TElement) System.Collections.Generic.ICollection<TElement>.Clear() System.Collections.Generic.ICollection<TElement>.Contains(TElement) System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32) System.Collections.Generic.ICollection<TElement>.Remove(TElement) System.Collections.Generic.ICollection<TElement>.Count System.Collections.Generic.ICollection<TElement>.IsReadOnly System.Collections.Generic.IEnumerable<TElement>.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public interface IConfigurationCollection<TElement> : IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged Type Parameters Name Description TElement The type of the collection element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationCollection<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": [ \"Value 1\", \"Value 2\", \"Value 3\" ] } Methods | Improve this Doc View Source AddCopy(TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(TElement value) Parameters Type Name Description TElement value The value to copy (must be compatible with the type or interface specified by TElement ). Returns Type Description TElement The newly added element. If this element is derived from IConfigurationObject , IConfigurationCollection<TElement> or IConfigurationDictionary<TElement> , and the object given was not created by this library, then a new object will be created and they properties and elements in the object given will be copied. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew() Adds a new value with the key specified, returning the newly created object. Declaration TElement AddNew() Returns Type Description TElement The newly added element. Remarks This allows instances of the internal implementation of objects to be created and added to the collection, and returned to be populated. See Also System.Collections.Generic.IList <T> System.Collections.Specialized.INotifyCollectionChanged IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html",
    "title": "Class ConfigurationObjectComparer | API Documentation",
    "keywords": "Class ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . Inheritance System.Object ConfigurationObjectComparer Implements System.Collections.Generic.IEqualityComparer < IConfigurationObject > Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public class ConfigurationObjectComparer : IEqualityComparer<IConfigurationObject> Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Properties | Improve this Doc View Source Instance Gets an instance of the comparer Declaration public static ConfigurationObjectComparer Instance { get; } Property Value Type Description ConfigurationObjectComparer The instance of the comparer Methods | Improve this Doc View Source Equals(IConfigurationObject, IConfigurationObject) Determines whether the specified objects are equal. Declaration public bool Equals(IConfigurationObject x, IConfigurationObject y) Parameters Type Name Description IConfigurationObject x The first object of type to compare. IConfigurationObject y The second object of type to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false . | Improve this Doc View Source GetHashCode(IConfigurationObject) Returns a hash code for this instance. Declaration public int GetHashCode(IConfigurationObject obj) Parameters Type Name Description IConfigurationObject obj The object. Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Implements System.Collections.Generic.IEqualityComparer<T> See Also System.Collections.Generic.IEqualityComparer <T>"
  },
  "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.ConfigurationCollectionConverter-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.Newtonsoft.Json.ConfigurationCollectionConverter-1.html",
    "title": "Class ConfigurationCollectionConverter<TElement> | API Documentation",
    "keywords": "Class ConfigurationCollectionConverter<TElement> Inheritance System.Object Newtonsoft.Json.JsonConverter Newtonsoft.Json.JsonConverter < IConfigurationCollection <TElement>> ConfigurationCollectionConverter<TElement> Inherited Members Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationCollection<TElement>>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationCollection<TElement>>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationCollection<TElement>>.CanConvert(System.Type) Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Namespace : OpenCollar.Extensions.Converters.Newtonsoft.Json Assembly : OpenCollar.Extensions.dll Syntax public sealed class ConfigurationCollectionConverter<TElement> : JsonConverter<IConfigurationCollection<TElement>> Type Parameters Name Description TElement Methods | Improve this Doc View Source ReadJson(JsonReader, Type, IConfigurationCollection<TElement>, Boolean, JsonSerializer) Declaration public override IConfigurationCollection<TElement> ReadJson(JsonReader reader, Type objectType, IConfigurationCollection<TElement> existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType IConfigurationCollection <TElement> existingValue System.Boolean hasExistingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description IConfigurationCollection <TElement> Overrides Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationCollection<TElement>>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, OpenCollar.Extensions.IConfigurationCollection<TElement>, System.Boolean, Newtonsoft.Json.JsonSerializer) | Improve this Doc View Source WriteJson(JsonWriter, IConfigurationCollection<TElement>, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, IConfigurationCollection<TElement> value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer IConfigurationCollection <TElement> value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter<OpenCollar.Extensions.IConfigurationCollection<TElement>>.WriteJson(Newtonsoft.Json.JsonWriter, OpenCollar.Extensions.IConfigurationCollection<TElement>, Newtonsoft.Json.JsonSerializer)"
  }
}