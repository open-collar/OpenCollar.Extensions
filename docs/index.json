{
  "api/OpenCollar.Extensions.DelegateExtensions.html": {
    "href": "api/OpenCollar.Extensions.DelegateExtensions.html",
    "title": "Class DelegateExtensions | API Documentation",
    "keywords": "Class DelegateExtensions Extensions to the System.Delegate type. In particular a \"safe\" method for raising events that may have no subscribers or for which the subscribers might throw exceptions. Inheritance System.Object DelegateExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class DelegateExtensions Methods | Improve this Doc View Source GetDescription(Delegate) Gets a description of a delegate and where it implemented. Declaration [NotNull] public static string GetDescription([CanBeNull] this Delegate delegate) Parameters Type Name Description System.Delegate delegate The delegate to describe. Returns Type Description System.String A description of the type and method specified by the delegate. | Improve this Doc View Source SafeInvoke(Delegate, String, Object) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender) Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. | Improve this Doc View Source SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind) Invokes the delegate given (if not null ) with protection against exceptions thrown by the invoked methods. Declaration public static bool SafeInvoke<T>([CanBeNull] this Delegate handler, [NotNull] string eventName, [CanBeNull] object sender, EventArgsFactory<T> eventArgFactory, ArgsUsageKind usage) where T : EventArgs Parameters Type Name Description System.Delegate handler The delegate to call. System.String eventName The name of the event being raised. System.Object sender The object to pass as the sender. EventArgsFactory <T> eventArgFactory A factory for generating event args. ArgsUsageKind usage The way in which to use the factory to generate args. Returns Type Description System.Boolean true if at least one delegate was successfully invoked, false otherwise. Type Parameters Name Description T The type of the event args to pass. Exceptions Type Condition System.ArgumentOutOfRangeException Invalid value passed in the usage argument."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics This library provides extensions and base classes for low-level .NET framework types. In particular this includes methods extendending the Delegate and Type classes. These include: BadImplementationException - An exception thrown when an implementation of an interface or delegate (for example an overridden abstract method or a factory class) breaks the contract either explicitly or implicitly expected. Compare - Utility methods supporting comparisons between objects and values. DelegateExtensions - Extensions to the Delegate type. In particular a \"safe\" method for raising events that may have no subscribers or for which the subscribers might throw exceptions. Disposable - A base class implementing the Dispose Pattern in a thread-safe way. ExceptionManager - Provides a very simple way to route all unhandled exceptions through a single point. TypeExtensions - Methods extending the Type type. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions | API Documentation",
    "keywords": "OpenCollar.Extensions This library provides extensions and base classes for low-level .NET framework types. In particular this includes methods extendending the Delegate and Type classes. These include: BadImplementationException - An exception thrown when an implementation of an interface or delegate (for example an overridden abstract method or a factory class) breaks the contract either explicitly or implicitly expected. Compare - Utility methods supporting comparisons between objects and values. DelegateExtensions - Extensions to the Delegate type. In particular a \"safe\" method for raising events that may have no subscribers or for which the subscribers might throw exceptions. Disposable - A base class implementing the Dispose Pattern in a thread-safe way. ExceptionManager - Provides a very simple way to route all unhandled exceptions through a single point. TypeExtensions - Methods extending the Type type. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage This library provides extensions and base classes for low-level .NET framework types. In particular this includes methods extendending the Delegate and Type classes. Related Projects OpenCollar.Extensions OpenCollar.Extensions.Collections OpenCollar.Extensions.Configuraton OpenCollar.Extensions.IO OpenCollar.Extensions.Security OpenCollar.Extensions.Threading OpenCollar.Extensions.Validation"
  },
  "api/OpenCollar.Extensions.Compare.html": {
    "href": "api/OpenCollar.Extensions.Compare.html",
    "title": "Class Compare | API Documentation",
    "keywords": "Class Compare Utility methods supporting comparisons between objects and values. Inheritance System.Object Compare Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class Compare Methods | Improve this Doc View Source CompareAny(Object, Object) Compares any two values. Declaration public static int CompareAny([CanBeNull] object left, [CanBeNull] object right) Parameters Type Name Description System.Object left The first value to compare (against which the result will be relative). System.Object right The second value. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero left object is less than the right parameter. Zero left object is equal to right . Greater than zero left object is greater than right ."
  },
  "api/OpenCollar.Extensions.BadImplementationException.html": {
    "href": "api/OpenCollar.Extensions.BadImplementationException.html",
    "title": "Class BadImplementationException | API Documentation",
    "keywords": "Class BadImplementationException An exception thrown when an implementation of an interface or delegate (for example an overridden abstract method or a factory class) breaks the contract either explicitly or implicitly expected. Inheritance System.Object System.Exception BadImplementationException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public class BadImplementationException : Exception, ISerializable Constructors | Improve this Doc View Source BadImplementationException() Initializes a new instance of the BadImplementationException class. Declaration public BadImplementationException() | Improve this Doc View Source BadImplementationException(SerializationInfo, StreamingContext) Initializes a new instance of the BadImplementationException class with serialized data. Declaration protected BadImplementationException([NotNull] SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source BadImplementationException(String) Initializes a new instance of the BadImplementationException class with a specified error message. Declaration public BadImplementationException([CanBeNull] string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source BadImplementationException(String, Exception) Initializes a new instance of the BadImplementationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public BadImplementationException([CanBeNull] string message, [CanBeNull] Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable"
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics This library provides extensions and base classes for low-level .NET framework types."
  },
  "api/OpenCollar.Extensions.TypeExtensions.html": {
    "href": "api/OpenCollar.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | API Documentation",
    "keywords": "Class TypeExtensions Methods that extend the System.Type class. Inheritance System.Object TypeExtensions Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class TypeExtensions Methods | Improve this Doc View Source GetAssemblyDirectoryPath(Type) Gets the full path to directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static string GetAssemblyDirectoryPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. Returns Type Description System.String The full path to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc View Source GetAssemblyPath(Type) Gets the full path to the assembly in which the type is defined. Declaration [NotNull] public static string GetAssemblyPath([CanBeNull] this Type type) Parameters Type Name Description System.Type type The type for which to return the assembly path. Returns Type Description System.String The full path to the assembly in which the type is defined, or if the assembly is dynamic or type is null then an empty string is returned. | Improve this Doc View Source GetAssemblyRelativePath(Type, String[]) Gets the full path to a file or directory relative to the directory in which resides the assembly in which the type is defined. Declaration [ContractAnnotation(\"type:null=>null;type:notnull=>notnull\")] public static string GetAssemblyRelativePath([CanBeNull] this Type type, [CanBeNull] params string[] pathFragments) Parameters Type Name Description System.Type type The type for which to return the assembly directory path. If null then null is returned System.String [] pathFragments The fragments of the path to append to root directory in which the assembly resides. Returns Type Description System.String The full path to a file or directory relative to the directory in which resides the assembly in which the type is defined, or if the assembly is dynamic or type is null then an the relative version of the path given is returned."
  },
  "api/OpenCollar.Extensions.EventArgsFactory-1.html": {
    "href": "api/OpenCollar.Extensions.EventArgsFactory-1.html",
    "title": "Delegate EventArgsFactory<T> | API Documentation",
    "keywords": "Delegate EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public delegate T EventArgsFactory<out T>() where T : EventArgs; Returns Type Description T A instance of the event args to pass to the delegate when invoked. Type Parameters Name Description T The type of the event args that will be returned. Extension Methods DelegateExtensions.GetDescription(Delegate) DelegateExtensions.SafeInvoke(Delegate, String, Object) DelegateExtensions.SafeInvoke<T>(Delegate, String, Object, EventArgsFactory<T>, ArgsUsageKind)"
  },
  "api/OpenCollar.Extensions.ArgsUsageKind.html": {
    "href": "api/OpenCollar.Extensions.ArgsUsageKind.html",
    "title": "Enum ArgsUsageKind | API Documentation",
    "keywords": "Enum ArgsUsageKind Defines the ways in which an event args factory should be used. Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public enum ArgsUsageKind Fields Name Description Reuse The factory will be called once and the same instance of the event args will be used for all delegates. UniqueInstance The factory will be called separately for each delegate. Unknown Usage is undefined (this will cause an error if used)."
  },
  "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html": {
    "href": "api/OpenCollar.Extensions.UnhandledExceptionEventArgs.html",
    "title": "Class UnhandledExceptionEventArgs | API Documentation",
    "keywords": "Class UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Inheritance System.Object System.EventArgs System.ComponentModel.HandledEventArgs UnhandledExceptionEventArgs Inherited Members System.ComponentModel.HandledEventArgs.Handled System.EventArgs.Empty Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public sealed class UnhandledExceptionEventArgs : HandledEventArgs Properties | Improve this Doc View Source Exception Gets the exception that could not be handled. Declaration [NotNull] public Exception Exception { get; } Property Value Type Description System.Exception The exception that could not be handled. Will never be null ."
  },
  "api/OpenCollar.Extensions.ExceptionManager.html": {
    "href": "api/OpenCollar.Extensions.ExceptionManager.html",
    "title": "Class ExceptionManager | API Documentation",
    "keywords": "Class ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. Inheritance System.Object ExceptionManager Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax public static class ExceptionManager Methods | Improve this Doc View Source HasRegisteredHandlers() Determines whether there are any registered exception handlers. Declaration public static bool HasRegisteredHandlers() Returns Type Description System.Boolean true if [has registered handlers]; otherwise, false . | Improve this Doc View Source OnUnhandledException(Exception) Called when an exception cannot be handled. Declaration public static void OnUnhandledException([CanBeNull] Exception exception) Parameters Type Name Description System.Exception exception The exception that cannot be handled. Events | Improve this Doc View Source UnhandledException An event that is raised every time an unhandled exception is reported. Declaration public static event EventHandler<UnhandledExceptionEventArgs> UnhandledException Event Type Type Description System.EventHandler < UnhandledExceptionEventArgs >"
  },
  "api/OpenCollar.Extensions.Disposable.html": {
    "href": "api/OpenCollar.Extensions.Disposable.html",
    "title": "Class Disposable | API Documentation",
    "keywords": "Class Disposable A base class for objects that implements System.IDisposable and the Dispose Pattern in a thread-safe way. Inheritance System.Object Disposable Implements System.IDisposable Namespace : OpenCollar.Extensions Assembly : OpenCollar.Extensions.dll Syntax [Serializable] public abstract class Disposable : IDisposable Remarks No finalizer is implemented - this is left to the few consumers that will actually need it; but, the finalizer is surpressed if the System.IDisposable.Dispose() method is called. If your class implements a finalizer it should call the Dispose(Boolean) method with the disposing argument set to false . Methods | Improve this Doc View Source CheckNotDisposed() Checks that the object has not been disposed of, and throws an exception if it has. Declaration public void CheckNotDisposed() Exceptions Type Condition System.ObjectDisposedException Object cannot be accessed after it has been disposed of. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Remarks Any exceptions thrown by the implementation of the Dispose(Boolean) method will be caught and not re-thrown (see CA1065: Do not raise exceptions in unexpected locations for more details). | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Implements System.IDisposable"
  },
  "api/OpenCollar.Extensions.html": {
    "href": "api/OpenCollar.Extensions.html",
    "title": "Namespace OpenCollar.Extensions | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions Classes BadImplementationException An exception thrown when an implementation of an interface or delegate (for example an overridden abstract method or a factory class) breaks the contract either explicitly or implicitly expected. Compare Utility methods supporting comparisons between objects and values. DelegateExtensions Extensions to the System.Delegate type. In particular a \"safe\" method for raising events that may have no subscribers or for which the subscribers might throw exceptions. Disposable A base class for objects that implements System.IDisposable and the Dispose Pattern in a thread-safe way. ExceptionManager The central exception manager used to report and receive all unhandled exceptions in the application. TypeExtensions Methods that extend the System.Type class. UnhandledExceptionEventArgs A class representing the argument supplied when an unhandled exception is reported. Use the System.ComponentModel.HandledEventArgs.Handled property to indicate that the event has been handled and no further callbacks should be raised. Enums ArgsUsageKind Defines the ways in which an event args factory should be used. Delegates EventArgsFactory<T> A delegate used to generate event args for a safe call to a delegate."
  }
}